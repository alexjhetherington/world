// Generated by SpatialOS codegen. DO NOT EDIT!
// source: ClientConnection in improbable/player/ClientConnection.schema.

namespace Improbable.Player
{

public static class ClientConnection_Extensions
{
  public static ClientConnection.Data Get(this global::Improbable.Worker.IComponentData<ClientConnection> data)
  {
    return (ClientConnection.Data) data;
  }

  public static ClientConnection.Update Get(this global::Improbable.Worker.IComponentUpdate<ClientConnection> update)
  {
    return (ClientConnection.Update) update;
  }

  public static ClientConnection.Commands.Heartbeat.Request Get(this global::Improbable.Worker.ICommandRequest<ClientConnection.Commands.Heartbeat> request)
  {
    return (ClientConnection.Commands.Heartbeat.Request) request;
  }

  public static ClientConnection.Commands.Heartbeat.Response Get(this global::Improbable.Worker.ICommandResponse<ClientConnection.Commands.Heartbeat> response)
  {
    return (ClientConnection.Commands.Heartbeat.Response) response;
  }

  public static ClientConnection.Commands.DisconnectClient.Request Get(this global::Improbable.Worker.ICommandRequest<ClientConnection.Commands.DisconnectClient> request)
  {
    return (ClientConnection.Commands.DisconnectClient.Request) request;
  }

  public static ClientConnection.Commands.DisconnectClient.Response Get(this global::Improbable.Worker.ICommandResponse<ClientConnection.Commands.DisconnectClient> response)
  {
    return (ClientConnection.Commands.DisconnectClient.Response) response;
  }
}

public partial class ClientConnection : global::Improbable.Worker.IComponentMetaclass
{
  public const uint ComponentId = 1003;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the ClientConnection component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<ClientConnection>, global::Improbable.Collections.IDeepCopyable<Data>
  {
    public global::Improbable.Player.ClientConnectionData Value;

    public Data(global::Improbable.Player.ClientConnectionData value)
    {
      Value = value;
    }

    public Data(uint timeoutBeatsRemaining)
    {
      Value = new global::Improbable.Player.ClientConnectionData(timeoutBeatsRemaining);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<ClientConnection> ToUpdate()
    {
      var update = new Update();
      update.SetTimeoutBeatsRemaining(Value.timeoutBeatsRemaining);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the ClientConnection component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<ClientConnection>, global::Improbable.Collections.IDeepCopyable<Update>
  {
    /// <summary>
    /// Field timeout_beats_remaining = 1.
    /// </summary>
    public global::Improbable.Collections.Option<uint> timeoutBeatsRemaining;
    public Update SetTimeoutBeatsRemaining(uint _value)
    {
      timeoutBeatsRemaining.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (timeoutBeatsRemaining.HasValue)
      {
        uint field;
        field = timeoutBeatsRemaining.Value;
        _result.timeoutBeatsRemaining.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<ClientConnection> ToInitialData()
    {
      return new Data(new global::Improbable.Player.ClientConnectionData(timeoutBeatsRemaining.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<ClientConnection> _data)
    {
      var _concrete = _data.Get();
      if (timeoutBeatsRemaining.HasValue)
      {
        _concrete.Value.timeoutBeatsRemaining = timeoutBeatsRemaining.Value;
      }
    }
  }

  public partial class Commands
  {
    /// <summary>
    /// Command heartbeat.
    /// </summary>
    public partial class Heartbeat : global::Improbable.Worker.ICommandMetaclass
    {
      public uint ComponentId { get { return 1003; } }
      public uint CommandId { get { return 1; } }

      public class Request : global::Improbable.Worker.ICommandRequest<Heartbeat>, global::Improbable.Collections.IDeepCopyable<Request>
      {
        public global::Improbable.Player.HeartbeatRequest Value;

        public Request(global::Improbable.Player.HeartbeatRequest value)
        {
          Value = value;
        }

        public Request()
        {
          Value = new global::Improbable.Player.HeartbeatRequest();
        }

        public Request DeepCopy()
        {
          return new Request(Value.DeepCopy());
        }

        public global::Improbable.Worker.Internal.GenericCommandObject ToGenericObject()
        {
          return new global::Improbable.Worker.Internal.GenericCommandObject(1, this);
        }
      }

      public class Response : global::Improbable.Worker.ICommandResponse<Heartbeat>, global::Improbable.Collections.IDeepCopyable<Response>
      {
        public global::Improbable.Player.HeartbeatResponse Value;

        public Response(global::Improbable.Player.HeartbeatResponse value)
        {
          Value = value;
        }

        public Response()
        {
          Value = new global::Improbable.Player.HeartbeatResponse();
        }

        public Response DeepCopy()
        {
          return new Response(Value.DeepCopy());
        }

        public global::Improbable.Worker.Internal.GenericCommandObject ToGenericObject()
        {
          return new global::Improbable.Worker.Internal.GenericCommandObject(1, this);
        }
      }
    }
    /// <summary>
    /// Command disconnect_client.
    /// </summary>
    public partial class DisconnectClient : global::Improbable.Worker.ICommandMetaclass
    {
      public uint ComponentId { get { return 1003; } }
      public uint CommandId { get { return 2; } }

      public class Request : global::Improbable.Worker.ICommandRequest<DisconnectClient>, global::Improbable.Collections.IDeepCopyable<Request>
      {
        public global::Improbable.Player.ClientDisconnectRequest Value;

        public Request(global::Improbable.Player.ClientDisconnectRequest value)
        {
          Value = value;
        }

        public Request()
        {
          Value = new global::Improbable.Player.ClientDisconnectRequest();
        }

        public Request DeepCopy()
        {
          return new Request(Value.DeepCopy());
        }

        public global::Improbable.Worker.Internal.GenericCommandObject ToGenericObject()
        {
          return new global::Improbable.Worker.Internal.GenericCommandObject(2, this);
        }
      }

      public class Response : global::Improbable.Worker.ICommandResponse<DisconnectClient>, global::Improbable.Collections.IDeepCopyable<Response>
      {
        public global::Improbable.Player.ClientDisconnectResponse Value;

        public Response(global::Improbable.Player.ClientDisconnectResponse value)
        {
          Value = value;
        }

        public Response()
        {
          Value = new global::Improbable.Player.ClientDisconnectResponse();
        }

        public Response DeepCopy()
        {
          return new Response(Value.DeepCopy());
        }

        public global::Improbable.Worker.Internal.GenericCommandObject ToGenericObject()
        {
          return new global::Improbable.Worker.Internal.GenericCommandObject(2, this);
        }
      }
    }
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable Vtable {
    get {
      global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable vtable;
      vtable.ComponentId = ComponentId;
      unsafe { vtable.UserData = null; }
      vtable.Free = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientFree);
      vtable.Copy = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientCopy);
      vtable.Deserialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientDeserialize);
      vtable.Serialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientSerialize);
      return vtable;
    }
  }

  public void InvokeHandler(global::Improbable.Worker.Dynamic.Handler handler)
  {
    handler.Accept<ClientConnection>(this);
  }

  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize
      clientDeserialize = ClientDeserialize;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize
      clientSerialize = ClientSerialize;

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize))]
  private static unsafe global::System.Byte
  ClientDeserialize(global::System.UInt32 componentId,
                    void* userData,
                    global::System.Byte handleType,
                    global::Improbable.Worker.Internal.Pbio.Object* root,
                    global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle** handleOut)
  {
    *handleOut = null;
    try
    {
      *handleOut = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = new Update();
        var fieldsToClear = new global::System.Collections.Generic.HashSet<uint>();
        var fieldsToClearCount = global::Improbable.Worker.Internal.Pbio.GetUint32Count(root, /* fields to clear */ 1);
        for (uint i = 0; i < fieldsToClearCount; ++i)
        {
           fieldsToClear.Add(global::Improbable.Worker.Internal.Pbio.IndexUint32(root, /* fields to clear */ 1, i));
        }
        var stateObject = global::Improbable.Worker.Internal.Pbio.GetObject(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, /* entity_state */ 2), 1003);
        if (global::Improbable.Worker.Internal.Pbio.GetUint32Count(stateObject, 1) > 0)
        {
          uint field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetUint32(stateObject, 1);
          }
          data.timeoutBeatsRemaining.Set(field);
        }
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot)
      {
        var data = new Data(global::Improbable.Player.ClientConnectionData_Internal.Read(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, 1003)));
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        var commandObject = global::Improbable.Worker.Internal.Pbio.GetObject(root, 1003);
        if (global::Improbable.Worker.Internal.Pbio.GetObjectCount(commandObject, 1) != 0) {
          data.CommandId = 1;
          data.CommandObject = new Commands.Heartbeat.Request(global::Improbable.Player.HeartbeatRequest_Internal.Read(global::Improbable.Worker.Internal.Pbio.GetObject(commandObject, 1)));
          return 1;
        }
        if (global::Improbable.Worker.Internal.Pbio.GetObjectCount(commandObject, 3) != 0) {
          data.CommandId = 2;
          data.CommandObject = new Commands.DisconnectClient.Request(global::Improbable.Player.ClientDisconnectRequest_Internal.Read(global::Improbable.Worker.Internal.Pbio.GetObject(commandObject, 3)));
          return 1;
        }
        return 0;
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        var commandObject = global::Improbable.Worker.Internal.Pbio.GetObject(root, 1003);
        if (global::Improbable.Worker.Internal.Pbio.GetObjectCount(commandObject, 2) != 0) {
          data.CommandId = 1;
          data.CommandObject = new Commands.Heartbeat.Response(global::Improbable.Player.HeartbeatResponse_Internal.Read(global::Improbable.Worker.Internal.Pbio.GetObject(commandObject, 2)));
          return 1;
        }
        if (global::Improbable.Worker.Internal.Pbio.GetObjectCount(commandObject, 4) != 0) {
          data.CommandId = 2;
          data.CommandObject = new Commands.DisconnectClient.Response(global::Improbable.Player.ClientDisconnectResponse_Internal.Read(global::Improbable.Worker.Internal.Pbio.GetObject(commandObject, 4)));
          return 1;
        }
        return 0;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return 0;
    }
    return 1;
  }

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize))]
  private static unsafe void
  ClientSerialize(global::System.UInt32 componentId,
                  void* userData,
                  global::System.Byte handleType,
                  global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle* handle,
                  global::Improbable.Worker.Internal.Pbio.Object* root)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(*handle);
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = (Update) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        var stateObject = global::Improbable.Worker.Internal.Pbio.AddObject(
            global::Improbable.Worker.Internal.Pbio.AddObject(root, /* entity_state */ 2), 1003);
        if (data.timeoutBeatsRemaining.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddUint32(stateObject, 1, data.timeoutBeatsRemaining.Value);
          }
        }
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot) {
        var data = (Data) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        global::Improbable.Player.ClientConnectionData_Internal.Write(_pool, data.Value, global::Improbable.Worker.Internal.Pbio.AddObject(root, 1003));
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        var data = (global::Improbable.Worker.Internal.GenericCommandObject)
            global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        var commandObject = global::Improbable.Worker.Internal.Pbio.AddObject(root, 1003);
        if (data.CommandId == 1)
        {
          var requestObject = (Commands.Heartbeat.Request) data.CommandObject;
          {
            global::Improbable.Player.HeartbeatRequest_Internal.Write(_pool, requestObject.Value, global::Improbable.Worker.Internal.Pbio.AddObject(commandObject, 1));
          }
        }
        if (data.CommandId == 2)
        {
          var requestObject = (Commands.DisconnectClient.Request) data.CommandObject;
          {
            global::Improbable.Player.ClientDisconnectRequest_Internal.Write(_pool, requestObject.Value, global::Improbable.Worker.Internal.Pbio.AddObject(commandObject, 3));
          }
        }
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        var data = (global::Improbable.Worker.Internal.GenericCommandObject)
            global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        var commandObject = global::Improbable.Worker.Internal.Pbio.AddObject(root, 1003);
        if (data.CommandId == 1)
        {
          var responseObject = (Commands.Heartbeat.Response) data.CommandObject;
          {
            global::Improbable.Player.HeartbeatResponse_Internal.Write(_pool, responseObject.Value, global::Improbable.Worker.Internal.Pbio.AddObject(commandObject, 2));
          }
        }
        if (data.CommandId == 2)
        {
          var responseObject = (Commands.DisconnectClient.Response) data.CommandObject;
          {
            global::Improbable.Player.ClientDisconnectResponse_Internal.Write(_pool, responseObject.Value, global::Improbable.Worker.Internal.Pbio.AddObject(commandObject, 4));
          }
        }
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
  }
}

}
