// Generated by SpatialOS codegen. DO NOT EDIT!
// source: Metadata in improbable/standard_library.schema.

namespace Improbable
{

public static class Metadata_Extensions
{
  public static Metadata.Data Get(this global::Improbable.Worker.IComponentData<Metadata> data)
  {
    return (Metadata.Data) data;
  }

  public static Metadata.Update Get(this global::Improbable.Worker.IComponentUpdate<Metadata> update)
  {
    return (Metadata.Update) update;
  }
}

public partial class Metadata : global::Improbable.Worker.IComponentMetaclass
{
  public const uint ComponentId = 53;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the Metadata component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<Metadata>, global::Improbable.Collections.IDeepCopyable<Data>
  {
    public global::Improbable.MetadataData Value;

    public Data(global::Improbable.MetadataData value)
    {
      Value = value;
    }

    public Data(string entityType)
    {
      Value = new global::Improbable.MetadataData(entityType);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<Metadata> ToUpdate()
    {
      var update = new Update();
      update.SetEntityType(Value.entityType);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the Metadata component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<Metadata>, global::Improbable.Collections.IDeepCopyable<Update>
  {
    /// <summary>
    /// Field entity_type = 1.
    /// </summary>
    public global::Improbable.Collections.Option<string> entityType;
    public Update SetEntityType(string _value)
    {
      entityType.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (entityType.HasValue)
      {
        string field;
        field = entityType.Value;
        _result.entityType.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<Metadata> ToInitialData()
    {
      return new Data(new global::Improbable.MetadataData(entityType.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<Metadata> _data)
    {
      var _concrete = _data.Get();
      if (entityType.HasValue)
      {
        _concrete.Value.entityType = entityType.Value;
      }
    }
  }

  public partial class Commands
  {
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable Vtable {
    get {
      global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable vtable;
      vtable.ComponentId = ComponentId;
      unsafe { vtable.UserData = null; }
      vtable.Free = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientFree);
      vtable.Copy = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientCopy);
      vtable.Deserialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientDeserialize);
      vtable.Serialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientSerialize);
      return vtable;
    }
  }

  public void InvokeHandler(global::Improbable.Worker.Dynamic.Handler handler)
  {
    handler.Accept<Metadata>(this);
  }

  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize
      clientDeserialize = ClientDeserialize;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize
      clientSerialize = ClientSerialize;

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize))]
  private static unsafe global::System.Byte
  ClientDeserialize(global::System.UInt32 componentId,
                    void* userData,
                    global::System.Byte handleType,
                    global::Improbable.Worker.Internal.Pbio.Object* root,
                    global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle** handleOut)
  {
    *handleOut = null;
    try
    {
      *handleOut = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = new Update();
        var fieldsToClear = new global::System.Collections.Generic.HashSet<uint>();
        var fieldsToClearCount = global::Improbable.Worker.Internal.Pbio.GetUint32Count(root, /* fields to clear */ 1);
        for (uint i = 0; i < fieldsToClearCount; ++i)
        {
           fieldsToClear.Add(global::Improbable.Worker.Internal.Pbio.IndexUint32(root, /* fields to clear */ 1, i));
        }
        var stateObject = global::Improbable.Worker.Internal.Pbio.GetObject(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, /* entity_state */ 2), 53);
        if (global::Improbable.Worker.Internal.Pbio.GetBytesCount(stateObject, 1) > 0)
        {
          string field;
          {
            field = global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(stateObject, 1), global::Improbable.Worker.Internal.Pbio.GetBytesLength(stateObject, 1)).BackingArray);
          }
          data.entityType.Set(field);
        }
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot)
      {
        var data = new Data(global::Improbable.MetadataData_Internal.Read(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, 53)));
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        return 0;
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        return 0;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return 0;
    }
    return 1;
  }

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize))]
  private static unsafe void
  ClientSerialize(global::System.UInt32 componentId,
                  void* userData,
                  global::System.Byte handleType,
                  global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle* handle,
                  global::Improbable.Worker.Internal.Pbio.Object* root)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(*handle);
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = (Update) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        var stateObject = global::Improbable.Worker.Internal.Pbio.AddObject(
            global::Improbable.Worker.Internal.Pbio.AddObject(root, /* entity_state */ 2), 53);
        if (data.entityType.HasValue)
        {
          {
            if (data.entityType.Value != null)
            {
              var _buffer = global::System.Text.Encoding.UTF8.GetBytes(data.entityType.Value);
              global::Improbable.Worker.Internal.Pbio.AddBytes(stateObject, 1, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
            }
            else
            {
              global::Improbable.Worker.Internal.Pbio.AddBytes(stateObject, 1, null, 0);
            }
          }
        }
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot) {
        var data = (Data) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        global::Improbable.MetadataData_Internal.Write(_pool, data.Value, global::Improbable.Worker.Internal.Pbio.AddObject(root, 53));
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        global::Improbable.Worker.Internal.Pbio.AddObject(root, 53);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        global::Improbable.Worker.Internal.Pbio.AddObject(root, 53);
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
  }
}

}
