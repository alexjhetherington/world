
using System.IO;
using UnityEditor;
using UnityEditor.iOS.Xcode;
using UnityEngine;

namespace Improbable.Editor.Addons.iOSBuildTools
{
    /// <summary>
    /// Configures and updates all Xcode build settings to be compatible with
    /// SpatialOS and iOS Player build targets.
    /// </summary>

    [InitializeOnLoad]
    internal static class XcodeSettingsBuilder
    {
        private const string WORKER_BUILD_FOLDER = "build/worker";
        private const string WORKER_NAME = "UnityClient@iOS";
        private const string CORE_SDK_DLL_NAME = "libCoreSdkDll.dylib";

        [MenuItem("Improbable/iOS/Update Xcode Build Settings (Device)")]
        public static void UpdateXcodeBuildSettingsForDevice()
        {
            UpdateXcodeBuildSettings(GetCoreSdkDllFolderForDevice());
        }

        [MenuItem("Improbable/iOS/Update Xcode Build Settings (Simulator)")]
        public static void UpdateXcodeBuildSettingsForSimulator()
        {
            UpdateXcodeBuildSettings(GetCoreSdkDllFolderForSimulator());
        }

        public static void UpdateXcodeBuildSettings(string dylibFolderPath)
        {
            var unityWorkerRoot = Path.Combine(Application.dataPath, "..");
            var iOSPlayerBuildFolder = Path.Combine(WORKER_BUILD_FOLDER, Path.Combine(WORKER_NAME, WORKER_NAME));
            var defaultBuildFolderPath = Path.Combine(unityWorkerRoot, iOSPlayerBuildFolder);

            UpdateXcodeBuildSettingsAt(defaultBuildFolderPath, dylibFolderPath);
        }

        private static void UpdateXcodeBuildSettingsAt(string buildFolderPath, string dylibFolderPath)
        {
            // Get path to build/workers/UnityClient@iOS/UnityClient@iOS/Unity-iPhone.xcodeproj
            string projectPath = PBXProject.GetPBXProjectPath(buildFolderPath);

            if (!File.Exists(projectPath))
            {
                Debug.LogErrorFormat("Unable to find pbxproj file at: {0}", projectPath);
                return;
            }

            // Load the current Xcode project
            PBXProject project = new PBXProject();
            project.ReadFromFile(projectPath);

            // Get Xcode Target GUID of "Unity-iPhone"
            var targetGuid = project.TargetGuidByName("Unity-iPhone");

            // Copy Core SDK .dylib from Assets/Plugins to Xcode project
            var dylibSource = Path.Combine(dylibFolderPath, CORE_SDK_DLL_NAME);
            var dylibTarget = Path.Combine(buildFolderPath, Path.Combine("Data", CORE_SDK_DLL_NAME));
            File.Copy(dylibSource, dylibTarget, true /* overwriteExisting */);

            // Add the .dylib to the Xcode project
            var dylibGuid = project.AddFile(dylibTarget, Path.Combine("Data", CORE_SDK_DLL_NAME), PBXSourceTree.Source);
            project.AddFileToBuild(targetGuid, dylibGuid);

            // Disable bitcode
            project.SetBuildProperty(targetGuid, "ENABLE_BITCODE", "NO");

            // Add @executable_path to runtime search paths so that @rpath/libCoreSdkDll.dylib resolves to
            // a path that can be located by Xcode and iOS devices.
            project.SetBuildProperty(targetGuid, "LD_RUNPATH_SEARCH_PATHS", "@executable_path");
            project.AddBuildProperty(targetGuid, "LD_RUNPATH_SEARCH_PATHS", "@executable_path/Data");

            // Fix library search paths generated by Unity by ensuring that quotation marks are not placed
            // around the search paths.
            project.SetBuildProperty(targetGuid, "LIBRARY_SEARCH_PATHS", "$(inherited)");
            project.AddBuildProperty(targetGuid, "LIBRARY_SEARCH_PATHS", "$(SRCROOT)");
            project.AddBuildProperty(targetGuid, "LIBRARY_SEARCH_PATHS", "$(SRCROOT)/Libraries");

            // Add the Data folder as a library search path to locate the libCoreSdkDll.dylib at link time.
            project.AddBuildProperty(targetGuid, "LIBRARY_SEARCH_PATHS", "$(SRCROOT)/Data");

            // Write all changes to the Xcode project file.
            project.WriteToFile(projectPath);

            // Output a useful message.
            Debug.LogFormat("Successfully updated Xcode project settings for: {0}", projectPath);
        }

        private static string GetCoreSdkDllFolderForSimulator()
        {
            return Path.Combine(Application.dataPath, "Plugins/Improbable/darwin_ios-x86_64_dll");
        }

        private static string GetCoreSdkDllFolderForDevice()
        {
            return Path.Combine(Application.dataPath, "Plugins/Improbable/darwin_ios-arm_dll");
        }
    }
}
